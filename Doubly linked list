/**
 * Created by deepika tripathi on 8/14/2018.
 */
public class DoublyLinkedList<E> {

    private static class Node<E>{

        private E data;
        private Node<E> next;
        private Node<E> pre;

       public Node(E e , Node<E> linkP,Node<E> linkN){
           data=e;
           pre=linkP;
            next=linkN;
        }

        public E getData(){
           return data;
        }

        public Node<E> getPre(){
            return pre;
        }

        public Node<E> getNext(){
            return next;
        }

        public void setPre(Node<E> p)
        {
            pre=p;
        }

        public void setNext(Node<E> n){
            next=n;
        }
    }

    private Node<E> head=null;
    private Node<E> tail=null;
    int size=0;

    DoublyLinkedList(){
        head=new Node<E>(null,null,null);
        tail=new Node<E>(null,null,null);
        head.setNext(tail);
    }

    int getSize(){
        return size;
    }

    boolean isEmpty(){
        if(size==0)
            return true;
        else
            return false;
    }

    public E first(){
        if(size==0)
            return null;

        return head.getNext().getData();
    }

    public E last(){
        if(size==0)
            return null;

        return tail.getPre().getData();
    }

    public void addFirst(E e){
        addBetween(e,head,head.getNext());
    }

    public void addLast(E e){
    addBetween(e,tail.getPre(),tail);
    }

    public E removeFirst(){
            if(isEmpty())
                return null;

         return remove(head.getNext());

    }

    public E removeLast(){
        if(isEmpty())
            return null;

        return remove(tail.getPre());
    }

    public void addBetween(E e,Node<E> predessor,Node<E> succssor)
    {
        Node<E> newest=new Node<E>(e,predessor,succssor);
        predessor.setNext(newest);
        succssor.setPre(newest);
        size++;
    }

    public E remove(Node<E> n){

        Node<E> predessor= n.getPre();
        Node<E> succsor=n.getNext();

        predessor.setNext(succsor);
        succsor.setPre(predessor);
        size--;

        return n.getData();
    }

  public void traverse(){
        Node<E> current=head;
        while(current.next != tail)
        {
            current=current.next;
            System.out.print(current.data+" ");
        }
  }
    public static void main(String[] args){

        DoublyLinkedList<Integer> dll=new DoublyLinkedList<Integer>();

        dll.addFirst(1);
        dll.addFirst(2);
        dll.addLast(3);
        dll.addLast(4);
       System.out.println( dll.removeFirst());
       System.out.println( dll.removeLast());
       System.out.println();
       dll.traverse();
    }


}
